// Code generated by MockGen. DO NOT EDIT.
// Source: jarvis/internal/pkg/interactivity (interfaces: Scenario)

// Package interactivity is a generated GoMock package.
package interactivity

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockScenario is a mock of Scenario interface
type MockScenario struct {
	ctrl     *gomock.Controller
	recorder *MockScenarioMockRecorder
}

// MockScenarioMockRecorder is the mock recorder for MockScenario
type MockScenarioMockRecorder struct {
	mock *MockScenario
}

// NewMockScenario creates a new mock instance
func NewMockScenario(ctrl *gomock.Controller) *MockScenario {
	mock := &MockScenario{ctrl: ctrl}
	mock.recorder = &MockScenarioMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScenario) EXPECT() *MockScenarioMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockScenario) Execute(arg0 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockScenarioMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockScenario)(nil).Execute), arg0)
}

// SetNext mocks base method
func (m *MockScenario) SetNext(arg0 Scenario) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNext", arg0)
}

// SetNext indicates an expected call of SetNext
func (mr *MockScenarioMockRecorder) SetNext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNext", reflect.TypeOf((*MockScenario)(nil).SetNext), arg0)
}
